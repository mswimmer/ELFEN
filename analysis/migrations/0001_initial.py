# Generated by Django 4.1.7 on 2023-08-18 19:49

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('web', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AntiAntiStaticAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('elflepton', models.BooleanField(default=False, verbose_name='Headers fixed by ELFLepton')),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='AntiStaticAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('readelf', models.CharField(max_length=1024, null=True, verbose_name='Messages while parsing with readelf')),
                ('pyelftools', models.CharField(max_length=1024, null=True, verbose_name='Messages while parsing with pyelftools')),
                ('packers', models.CharField(max_length=1024, null=True, verbose_name='Packer')),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='BindEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('fd', models.BigIntegerField(null=True)),
                ('family', models.PositiveIntegerField(null=True)),
                ('ip', models.CharField(max_length=16, null=True)),
                ('port', models.IntegerField(null=True)),
                ('retval', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CapaCapabilities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_address', models.PositiveBigIntegerField(null=True)),
                ('rules', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1024), null=True, size=None)),
                ('namespaces', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1024), null=True, size=None)),
                ('addresses', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), size=None), null=True, size=None)),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(max_length=15, null=True)),
                ('port', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConnectEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('fd', models.BigIntegerField(null=True)),
                ('family', models.PositiveIntegerField(null=True)),
                ('ip', models.CharField(max_length=16, null=True)),
                ('port', models.IntegerField(null=True)),
                ('retval', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Detection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.SmallIntegerField(null=True)),
                ('static_analysis_score', models.SmallIntegerField(null=True)),
                ('dynamic_analysis_score', models.SmallIntegerField(null=True)),
                ('static_analysis_detectors', models.JSONField(null=True)),
                ('dynamic_analysis_detectors', models.JSONField(null=True)),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='DynamicAnalysisMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=128)),
                ('console_output', models.BinaryField()),
                ('sample_pid', models.SmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='DynamicAnalysisReports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dropped_files', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), null=True, size=None)),
                ('memdump', models.BooleanField(default=False)),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ELFHeader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('e_ident_magic', models.BinaryField(max_length=4, null=True, verbose_name='EI_MAG')),
                ('e_ident_ei_class', models.CharField(max_length=12, null=True, verbose_name='EI_CLASS')),
                ('e_ident_ei_data', models.CharField(max_length=11, null=True, verbose_name='EI_DATA')),
                ('e_ident_ei_version', models.CharField(max_length=10, null=True, verbose_name='EI_VERSION')),
                ('e_ident_ei_osabi', models.CharField(max_length=19, null=True, verbose_name='EI_OSABI')),
                ('e_ident_ei_abiversion', models.PositiveSmallIntegerField(null=True, verbose_name='EI_ABIVERSION')),
                ('e_ident_ei_pad', models.BinaryField(max_length=7, null=True, verbose_name='EI_PAD')),
                ('e_ident_ei_nident', models.SmallIntegerField(null=True, verbose_name='EI_NIDENT')),
                ('e_type', models.CharField(max_length=7, null=True, verbose_name='e_type')),
                ('e_machine', models.CharField(max_length=14, null=True, verbose_name='e_machine')),
                ('e_version', models.CharField(max_length=10, null=True, verbose_name='e_version')),
                ('e_entry', models.PositiveBigIntegerField(null=True, verbose_name='e_entry')),
                ('e_phoff', models.PositiveBigIntegerField(null=True, verbose_name='e_phoff')),
                ('e_shoff', models.PositiveBigIntegerField(null=True, verbose_name='e_shoff')),
                ('e_flags', models.PositiveBigIntegerField(null=True, verbose_name='e_flags')),
                ('e_ehsize', models.PositiveSmallIntegerField(null=True, verbose_name='e_ehsize')),
                ('e_phentsize', models.PositiveSmallIntegerField(null=True, verbose_name='e_phentsize')),
                ('e_phnum', models.PositiveSmallIntegerField(null=True, verbose_name='e_phnum')),
                ('e_shentsize', models.PositiveSmallIntegerField(null=True, verbose_name='e_shentsize')),
                ('e_shnum', models.PositiveSmallIntegerField(null=True, verbose_name='e_shnum')),
                ('e_shstrndx', models.PositiveSmallIntegerField(null=True, verbose_name='e_shstrndx')),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ELFProgramHeader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=12), null=True, size=None, verbose_name='p_type')),
                ('p_offset', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='p_offset')),
                ('p_flags', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), null=True, size=None, verbose_name='p_flags')),
                ('p_vaddr', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='p_vaddr')),
                ('p_paddr', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='p_paddr')),
                ('p_filesz', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='p_filesz')),
                ('p_memsz', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='p_memsz')),
                ('p_align', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='p_align')),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ELFSectionHeader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sh_name', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), null=True, size=None, verbose_name='sh_name')),
                ('sh_name_str', django.contrib.postgres.fields.ArrayField(base_field=models.BinaryField(max_length=2048), null=True, size=None, verbose_name='sh_name (string)')),
                ('sh_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=12), null=True, size=None, verbose_name='sh_type')),
                ('sh_flags', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='sh_flags')),
                ('sh_addr', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='sh_addr')),
                ('sh_offset', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='sh_offset')),
                ('sh_size', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='sh_size')),
                ('sh_link', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), null=True, size=None, verbose_name='sh_link')),
                ('sh_info', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), null=True, size=None, verbose_name='sh_info')),
                ('sh_addralign', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='sh_addralign')),
                ('sh_entsize', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None, verbose_name='sh_entsize')),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ExecveEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('exec_path', models.BinaryField(max_length=128, null=True)),
                ('arg1', models.BinaryField(max_length=256, null=True)),
                ('arg2', models.BinaryField(max_length=256, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FcntlEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('fd', models.BigIntegerField(null=True)),
                ('cmd', models.IntegerField(null=True)),
                ('arg', models.BigIntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ForkEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('retval', models.SmallIntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GetPidEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('retval', models.SmallIntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GetPPidEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('retval', models.SmallIntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='KernelTrace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ListenEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('fd', models.IntegerField(null=True)),
                ('backlog', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MemoryStrings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=4096), null=True, size=None)),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='NetworkAnalysisReports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='PrintableStrings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=4096), null=True, size=None, verbose_name='Strings')),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
            ],
        ),
        migrations.CreateModel(
            name='SampleFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('os', models.CharField(max_length=32, null=True, verbose_name='Operating system')),
                ('arch', models.CharField(max_length=10, null=True, verbose_name='Architecture')),
                ('endian', models.CharField(choices=[('LE', 'Little Endian'), ('BE', 'Big Endian')], max_length=2, null=True, verbose_name='Endianness')),
                ('bit', models.CharField(choices=[('bits_32', '32-bit'), ('bits_64', '64-bit')], max_length=7, null=True, verbose_name='Bitness')),
                ('average_entropy', models.FloatField(null=True, verbose_name='Average entropy')),
                ('highest_block_entropy', models.FloatField(null=True, verbose_name='Highest 256-byte block entropy')),
                ('entry_point_bytes', models.BinaryField(max_length=20, null=True, verbose_name='Bytes at entry point address')),
                ('num_sections', models.SmallIntegerField(null=True, verbose_name='Number of sections')),
                ('num_segments', models.SmallIntegerField(null=True, verbose_name='Number of segments')),
                ('num_symtab_symbols', models.SmallIntegerField(null=True, verbose_name='Number of symbols in .symtab')),
                ('num_dynsym_symbols', models.SmallIntegerField(null=True, verbose_name='Number of symbols in .dynsym')),
                ('filesize', models.BigIntegerField(null=True, verbose_name='File size (bytes)')),
                ('lib_deps', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), null=True, size=None, verbose_name='Library dependencies')),
                ('stripped', models.BooleanField(null=True, verbose_name='Stripped')),
                ('interp', models.CharField(max_length=4096, null=True, verbose_name='Interpreter')),
                ('packed', models.CharField(max_length=128, null=True, verbose_name='Packed')),
                ('truncated', models.BooleanField(null=True, verbose_name='Truncated')),
                ('compiler', models.CharField(max_length=64, null=True, verbose_name='Compiler')),
                ('imports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1024), null=True, size=None, verbose_name='Imports')),
                ('exports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1024), null=True, size=None, verbose_name='Exports')),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sample_features', to='web.samplemetadata')),
            ],
        ),
        migrations.CreateModel(
            name='StaticAnalysisReports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('embedded_elf_offsets', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), null=True, size=None)),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
                ('capa', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.capacapabilities')),
                ('elfheader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.elfheader')),
                ('elfprogheader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.elfprogramheader')),
                ('elfsectionheader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.elfsectionheader')),
                ('samplefeatures', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.samplefeatures')),
                ('staticantianalysis', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.antistaticanalysis')),
                ('staticantiantianalysis', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.antiantistaticanalysis')),
                ('strings', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.printablestrings')),
            ],
        ),
        migrations.CreateModel(
            name='Strings',
            fields=[
                ('string', models.CharField(max_length=2048, primary_key=True, serialize=False, verbose_name='String')),
                ('sha256s', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), size=None, verbose_name='SHA256s of samples containing this string')),
            ],
        ),
        migrations.CreateModel(
            name='UserlandTrace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='WriteEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('fd', models.BigIntegerField(null=True)),
                ('buffer', models.BinaryField(max_length=128, null=True)),
                ('size', models.PositiveIntegerField(null=True)),
                ('kernel_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
            ],
        ),
        migrations.CreateModel(
            name='UnlinkEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('file_path', models.BinaryField(max_length=128, null=True)),
                ('kernel_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
            ],
        ),
        migrations.CreateModel(
            name='TaskReports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
                ('dynamic_reports', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='analysis.dynamicanalysisreports')),
                ('network_reports', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='analysis.networkanalysisreports')),
                ('static_reports', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='analysis.staticanalysisreports')),
            ],
        ),
        migrations.CreateModel(
            name='TaskMetadata',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('family', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), default=list, size=None)),
                ('start_time', models.DateTimeField(auto_now=True)),
                ('end_time', models.DateTimeField(null=True)),
                ('cmdline', models.CharField(max_length=4096, null=True)),
                ('userland_tracing', models.BooleanField()),
                ('errors', models.BooleanField(default=False)),
                ('error_msg', models.CharField(default='', max_length=4096)),
                ('status', models.SmallIntegerField(choices=[('0', 'Not Started'), ('1', 'In Progress'), ('2', 'Complete'), ('4', 'Error')], default=0)),
                ('detection', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='analysis.detection')),
                ('sha256', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
                ('taskreports', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='analysis.taskreports')),
            ],
        ),
        migrations.CreateModel(
            name='StrstrEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('haystack', models.CharField(max_length=256, null=True)),
                ('needle', models.CharField(max_length=256, null=True)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
                ('userland_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.userlandtrace')),
            ],
        ),
        migrations.CreateModel(
            name='StrncpyEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('src', models.CharField(max_length=256, null=True)),
                ('len', models.SmallIntegerField(null=True)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
                ('userland_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.userlandtrace')),
            ],
        ),
        migrations.CreateModel(
            name='StrncmpEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('str1', models.CharField(max_length=256, null=True)),
                ('str2', models.CharField(max_length=256, null=True)),
                ('len', models.SmallIntegerField(null=True)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
                ('userland_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.userlandtrace')),
            ],
        ),
        migrations.CreateModel(
            name='StrcpyEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('src', models.CharField(max_length=256, null=True)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
                ('userland_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.userlandtrace')),
            ],
        ),
        migrations.CreateModel(
            name='StrcmpEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('str1', models.CharField(max_length=256, null=True)),
                ('str2', models.CharField(max_length=256, null=True)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
                ('userland_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.userlandtrace')),
            ],
        ),
        migrations.CreateModel(
            name='SocketEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('domain', models.IntegerField(null=True)),
                ('type', models.IntegerField(null=True)),
                ('protocol', models.IntegerField(null=True)),
                ('fd', models.BigIntegerField(null=True)),
                ('kernel_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
            ],
        ),
        migrations.CreateModel(
            name='SetSockOptEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('fd', models.BigIntegerField(null=True)),
                ('level', models.IntegerField(null=True)),
                ('option_name', models.IntegerField(null=True)),
                ('option_value', models.BinaryField(max_length=128, null=True)),
                ('option_len', models.IntegerField(null=True)),
                ('kernel_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
            ],
        ),
        migrations.CreateModel(
            name='RenameEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('oldfile_path', models.BinaryField(max_length=128, null=True)),
                ('newfile_path', models.BinaryField(max_length=128, null=True)),
                ('kernel_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
            ],
        ),
        migrations.CreateModel(
            name='ReadlinkEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('file_path', models.BinaryField(max_length=128, null=True)),
                ('buffer', models.BinaryField(max_length=128, null=True)),
                ('retval', models.IntegerField(null=True)),
                ('kernel_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
            ],
        ),
        migrations.CreateModel(
            name='ReadEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('fd', models.BigIntegerField(null=True)),
                ('buffer', models.BinaryField(max_length=128, null=True)),
                ('size', models.PositiveIntegerField(null=True)),
                ('kernel_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
            ],
        ),
        migrations.CreateModel(
            name='PrctlEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('option', models.IntegerField(null=True)),
                ('arg2', models.BinaryField(max_length=128, null=True)),
                ('arg3', models.BigIntegerField(null=True)),
                ('arg4', models.BigIntegerField(null=True)),
                ('arg5', models.BigIntegerField(null=True)),
                ('kernel_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
            ],
        ),
        migrations.CreateModel(
            name='OpenEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.TimeField(null=True)),
                ('pid', models.PositiveSmallIntegerField(null=True)),
                ('procname', models.BinaryField(max_length=128, null=True)),
                ('file_path', models.BinaryField(max_length=128, null=True)),
                ('flags', models.BigIntegerField(null=True)),
                ('fd', models.BigIntegerField(null=True)),
                ('kernel_trace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata')),
            ],
        ),
        migrations.AddConstraint(
            model_name='networkanalysisreports',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['0', '1', '2', '4'])), name='analysis_networkanalysisreports_status_valid'),
        ),
        migrations.AddField(
            model_name='memorystrings',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='listenevent',
            name='kernel_trace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace'),
        ),
        migrations.AddField(
            model_name='listenevent',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='getppidevent',
            name='kernel_trace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace'),
        ),
        migrations.AddField(
            model_name='getppidevent',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='getpidevent',
            name='kernel_trace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace'),
        ),
        migrations.AddField(
            model_name='getpidevent',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='forkevent',
            name='kernel_trace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace'),
        ),
        migrations.AddField(
            model_name='forkevent',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='fcntlevent',
            name='kernel_trace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace'),
        ),
        migrations.AddField(
            model_name='fcntlevent',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='execveevent',
            name='kernel_trace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace'),
        ),
        migrations.AddField(
            model_name='execveevent',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='elfsectionheader',
            name='sample',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='elfprogramheader',
            name='sample',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='elfheader',
            name='sample',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='dynamicanalysisreports',
            name='kernel_trace',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='analysis.kerneltrace'),
        ),
        migrations.AddField(
            model_name='dynamicanalysisreports',
            name='memstrings',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.memorystrings'),
        ),
        migrations.AddField(
            model_name='dynamicanalysisreports',
            name='metadata',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='analysis.dynamicanalysismetadata'),
        ),
        migrations.AddField(
            model_name='dynamicanalysisreports',
            name='userland_trace',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='analysis.userlandtrace'),
        ),
        migrations.AddField(
            model_name='dynamicanalysismetadata',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='connectevent',
            name='kernel_trace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace'),
        ),
        migrations.AddField(
            model_name='connectevent',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='parent_task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='analysis.taskmetadata'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='sha256',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='capacapabilities',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='bindevent',
            name='kernel_trace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.kerneltrace'),
        ),
        migrations.AddField(
            model_name='bindevent',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='antistaticanalysis',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddField(
            model_name='antiantistaticanalysis',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.samplemetadata'),
        ),
        migrations.AddConstraint(
            model_name='taskreports',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['0', '1', '2', '4'])), name='analysis_taskreports_status_valid'),
        ),
        migrations.AddConstraint(
            model_name='taskmetadata',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['0', '1', '2', '4'])), name='analysis_taskmetadata_status_valid'),
        ),
        migrations.AddConstraint(
            model_name='staticanalysisreports',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['0', '1', '2', '4'])), name='analysis_staticanalysisreports_status_valid'),
        ),
        migrations.AddConstraint(
            model_name='samplefeatures',
            constraint=models.CheckConstraint(check=models.Q(('bit__in', ['bits_32', 'bits_64'])), name='analysis_samplefeatures_bit_valid'),
        ),
        migrations.AddConstraint(
            model_name='samplefeatures',
            constraint=models.CheckConstraint(check=models.Q(('endian__in', ['LE', 'BE'])), name='analysis_samplefeatures_endian_valid'),
        ),
        migrations.AddConstraint(
            model_name='dynamicanalysisreports',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['0', '1', '2', '4'])), name='analysis_dynamicanalysisreports_status_valid'),
        ),
        migrations.AddConstraint(
            model_name='capacapabilities',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['0', '1', '2', '4'])), name='analysis_capacapabilities_status_valid'),
        ),
    ]
